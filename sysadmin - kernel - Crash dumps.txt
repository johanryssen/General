
# Install pre-req:
subscription-manager repos --enable=rhel-7-server-optional-rpms
yum install kexec-tools crash


# Install kernel-debuginfo package
yum --enablerepo=\*debuginfo install kernel-debuginfo.$(uname -m) crash
-or-
debuginfo-install kernel


# /etc/kdump.conf
path /var/crash
default reboot
core_collector makedumpfile -l --message-level 1 -d 31

# Video issues:
# extra_modules vga15fb.ko

# /etc/sysconfig/kdump
sed -i 's/KDUMP_COMMANDLINE=""/KDUMP_COMMANDLINE="--reset-vga"/g ' /etc/sysconfig/kdump


# Update grub
GRUB_CMDLINE_LINUX="crashkernel=auto"
grub2-mkconfig -o /boot/grub2/grub.cfg
-or-
grubby --args="crashkernel=auto" --update-kernel=/boot/vmlinuz-`uname -r`
(Note: Will not be added to /etc/default/grub)


# Enable & start kdump:
systemctl enalbe --now kdump.service

# Reboot



----- Optional -----

# After system level changes, rebuild the initramfs manually:
kdumpctl rebuild


# Load a kernel with kexec:
kver=`uname -r`
kexec -l /boot/vmlinuz-$kver --initrd=/boot/initrd-$kver.img --command-line="`cat /proc/cmdline`"

# Kexec is a fastboot mechanism which allows booting a Linux kernel from the context of already running kernel without going through BIOS.
# BIOS can be very time consuming especially on the big servers with lots of peripherals.
# This can save a lot of time for developers who end up booting a machine numerous times.



----- SYSRQ -----

# Check current status
cat /proc/sys/kernel/sysrq
16

0 			- disable sysrq completely
1 			- enable all functions of sysrq
>1 			- bitmask to allow specific sysrq functions
2 = 0x2		- enable control of console logging level
4 = 0x4 	- enable control of keyboard (SAK, unraw)
8 = 0x8 	- enable debugging dumps of processes etc.
16 = 0x10 	- enable sync command
32 = 0x20	- enable remount read-only
64 = 0x40 	- enable signalling of processes (term, kill, oom-kill)
128 = 0x80 	- allow reboot/poweroff
256 = 0x100	- allow nicing of all RT tasks

# e.g. Enable all functions of sysrq:
echo 1 > /proc/sys/kernel/sysrq

# Use sysctl command to set
sysctl -w kernel.sysrq=1
kernel.sysrq = 1

cat /proc/sys/kernel/sysrq
1


----- SYSRQ-TRIGGER -----

## Usage:

b	Will immediately reboot the system without syncing or unmounting your disks.
c	Will perform a system crash by a NULL pointer dereference. A crashdump will be taken if configured.
d	Shows all locks that are held.
e	Send a SIGTERM to all processes, except for init.
f	Will call the oom killer to kill a memory hog process, but do not panic if nothing can be killed.
g	Used by kgdb (kernel debugger)
h	Will display help
i	Send a SIGKILL to all processes, except for init.
j	Forcibly “Just thaw it” - filesystems frozen by the FIFREEZE ioctl.
k	Secure Access Key (SAK) Kills all programs on the current virtual console.
l	Shows a stack backtrace for all active CPUs.
m	Will dump current memory info to your console.
n	Used to make RT tasks nice-able
o	Will shut your system off (if configured and supported).
p	Will dump the current registers and flags to your console.
q	Will dump per CPU lists of all armed hrtimers (but NOT regular timer_list timers) and detailed information about all clockevent devices
r	Turns off keyboard raw mode and sets it to XLATE.
s	Will attempt to sync all mounted filesystems.
t	Will dump a list of current tasks and their information to your console.
u	Will attempt to remount all mounted filesystems read-only.
v	Forcefully restores framebuffer console
w	Dumps tasks that are in uninterruptable (blocked) state.
x	Used by xmon interface on ppc/powerpc platforms. Show global PMU Registers on sparc64. Dump all TLB entries on MIPS.
y	Show global CPU Registers [SPARC-64 specific]
z	Dump the ftrace buffer
0-9	Sets the console log level, controlling which kernel messages will be printed to your console. (0, for example would make it so that only emergency messages like PANICs or OOPSes would make it to your console.)


## Examples:

# Crash the system (This can take several minutes to complete):
echo 1 > /proc/sys/kernel/sysrq
echo c > /proc/sysrq-trigger

# Sync all filesystems:
echo s > /proc/sysrq-trigger

# Kill high-memory processes to recover from OOM:
echo f > /proc/sysrq-trigger

# View blocked state (d state) processes:
echo w > /proc/sysrq-trigger



----- CRASH ANALYSIS -----

# Run crash:
crash /usr/lib/debug/lib/modules/<kernel>/vmlinux \ /var/crash/<timestamp>/vmcore


## Displaying the kernel message buffer:
crash> log

## Displaying the kernel stack trace:
crash> bt

## Display the backtrace of a single process:
crash> bt <pid>

## Displaying the status of running processes at time of crash:
crash> ps

## Displaying virtual memory information of the current context:
crash> vm

## Display information on a single process:
crash> vm <pid>

## Displaying information about open files of the current context:
crash> files 

## Display files opened by only one selected process:
crash> files <pid>

## View Swap space when System Crashed
crash> swap

## View IPCS (shared memory usage) when System Crashed:
crash> ipcs

## View System Information when System Crashed:
crash> sys

----------------------------