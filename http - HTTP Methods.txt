HTTP Methods (verbs)

-- POST --
Create (Add new data to data store)
201 (Created), 'Location' header with link to /customers/{id} containing new ID.
404 (Not Found), 409 (Conflict) if resource already exists..

- POST requests are never cached
- POST requests do not remain in the browser history
- POST requests cannot be bookmarked
- POST requests have no restrictions on data length


-- GET --
Read (Read data from API)
200 (OK), list of customers. Use pagination, sorting and filtering to navigate big lists.
200 (OK), single customer. 404 (Not Found), if ID not found or invalid.

- GET requests can be cached
- GET requests remain in the browser history
- GET requests can be bookmarked
- GET requests should never be used when dealing with sensitive data
- GET requests have length restrictions
- GET requests are only used to request data (not modify)


-- PUT --
Update/Replace (Update existing data)
405 (Method Not Allowed), unless you want to update/replace every resource in the entire collection.
200 (OK) or 204 (No Content). 404 (Not Found), if ID not found or invalid.

The difference between POST and PUT is that PUT requests are IDEMPOTENT.
That is, calling the same PUT request multiple times will always produce the same result.
In contrast, calling a POST request repeatedly have side effects of creating the same resource multiple times.


-- PATCH --
Update/Modify (Updates a subset of existing data)
405 (Method Not Allowed), unless you want to modify the collection itself.
200 (OK) or 204 (No Content). 404 (Not Found), if ID not found or invalid.


-- DELETE --
Delete (Remove data)
405 (Method Not Allowed), unless you want to delete the whole collectionâ€”not often desirable.
200 (OK). 404 (Not Found), if ID not found or invalid.


-- OPTIONS --
The OPTIONS method describes the communication options for the target resource.


-- HEAD --
HEAD is almost identical to GET, but without the response body.
In other words, if GET /users returns a list of users, then HEAD /users will make the same request but will not return the list of users.
HEAD requests are useful for checking what a GET request will return before actually making a GET request - like before downloading a large file or response body.
