# store IP addresses in a file
nmap -sn 10.10.10.0/24 | awk '/Nmap scan/{gsub(/[()]/,"",$NF); print $NF > "nmap_discovered_ips"}'


nmap -sC -sV <IP>

Nmap performs HOST DISCOVERY by sending four different probes:
ICMP type 8 (echo request)
ICMP type 13 (timestamp request)
TCP SYN packet to port 443
TCP ACK packet to port 80.
Also: Nmap sends an ARP request for any hosts on the local network, filling in MAC address details.

------------------------

# Quick scan + traceroute:
nmap -sn 10.10.1-10.0-255 --traceroute

# Service version + OS scan:
nmap -iL <ip list> -sV --version-intensity 5 -O -vv

------------------------

## Redirect output to file:
nmap -sn 10.10.0.0/24 | awk '{/Nmap scan/{gsub(/[()]/,"",$NF); print $NF > "scanresults.out"}'

## Save the scan output to different formats:
-oA	- All formats
-oN - Normal
-oX - XML
-oS - skript kiddie
-oG - grep-able

------------------------

## Tracing a packet on a single IP
nmap -vv -n -sn -PE -T4 --packet-trace 10.10.22.13

-vv		(Increase verbosity)
-n		(No DNS resolution. This speeds up our scan!)
-sn		(No port scan)
-PE		(Use ICMP echo request queries. This is what is displayed in the output above)
-T4 	(prohibits the dynamic scan delay from exceeding 10 ms for TCP ports).
--packet-trace (Trace sent and received packets)

------------------------

# Scan only for port 22
nmap -Pn -p 22 -n 10.10.10.0/24 --open -oG - 

# Basic scan:
nmap 192.168.0.0/24

# Basic scan, multiple networks:
nmap 192.168.0.0/24 10.80.0.0/24

# Quick scan, no port scan:
nmap -sn 192.168.0.0/24

# To view what an options does:
nmap | grep -- -sV
  -sV: Probe open ports to determine service/version info

# Scan open ports:
nmap -sV -p 22,443 192.168.0.0/24 –open

# Scan open port-range:
nmap -sV -p 22-443 192.168.0.0/24 –open

## Using recursive DNS proxies for a stealth scan

# Resolve target with Google DNS:
host somehost.local 8.8.8.8

# Run a stealth list scan -sL on the IP address 192.168.0.123
nmap --dns-servers 8.8.4.4,8.8.8.8 -sL 192.168.0.123/24
