iptables syntax:
iptables -{A|I} {ACCEPT|REJECT|FORWARD} [i/o iface][-s/d ip] [-p udp/tcp/icmp --dport|--sport nn..]] -j [LOG|ACCEPT|DROP|REJECT]
-or-
iptables -A <chain> -j <target>



------ iptables - delete individual rules -------
iptables -L --line-numbers
iptables -D INPUT <line num to delete>
-------------

Allow current connection to persist -->to maintain SSH session<--
Packets coming IN, with a Connection State of ESTABLISHED or RELATED to an established rule
-j ACCEPT --> Jump to the 'ACCEPT' target
# iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

Allow future SSH sessions:
# iptables -A INPUT -p tcp --dport ssh -j ACCEPT

iptables -A INPUT -p tcp --dport <PORT> -j ACCEPT

Above 2 rules will be shown as:

[root@centos74 ~]# iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED
ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh

========================
***
Only allow port 21 & 22 from 10.10.10.30, reject all other ports from that server:

[root@centos74 sysconfig]# iptables-save
# Generated by iptables-save v1.4.21 on Sun Apr  8 17:57:34 2018
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [5:632]
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -s 10.10.10.20/32 -p tcp -m tcp --dport 22 -j ACCEPT
-A INPUT -s 10.10.10.20/32 -p tcp -m tcp --dport 21 -j ACCEPT
-A INPUT -s 10.10.10.20/32 -p tcp -j REJECT --reject-with icmp-port-unreachable
COMMIT
# Completed on Sun Apr  8 17:57:34 2018
[root@centos74 sysconfig]#


===========================

All HTTP traffic sent to the FireWall address, to be redirected to the internal web server on port 80.

## Rule 1:
iptables -A FORWARD -i enp0s3 -o enp0s8 -p tcp --syn --dport 80 -m conntrack --ctstate NEW j ACCEPT

Tells iptables to forward & synchronise all incoming TCP port 80 traffic from the INbound interface (-i enp0s3) to the OUTbound interface (-o enp0s8).
"conntrack --ctstate NEW" tells iptables to accept NEW connections 


## Rule 2:
iptables -A FORWARD -i enp0s3 -o enp0s8 -m conntrack --ctstate ESTABLISHED,RELATED -j Accept

## Rule 3:
iptables -A FORWARD -i enp0s8 -o enp0s3 -m conntrack --ctstate ESTABLISHED,RELATED -j Accept

Allow ESTABLISHED and RELATED traffic to move back and forth between the Firewall and te web server.
This is necessary because there would be otherwise no way for the web server to get its replies back to the client 	to send a follow-up request. 

## Rule 4 (Routing):

[Edit the PREROUTNG chain]
iptables -t nat -A PREROUTING -i enp0s3 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.4
Applies to the NAT table (-t nat), and
redirect any incomming HTTP port 80 traffic, aimed at our first NIC (enp0s3),
to its destination, the private IP address of the web server

## Rule 5 
[Edit the POSTROUTNG chain - To establish two-way comms]
iptables -t nat -A POSTROUTNG -o enp0s8 -p tcp --dport 80 -d 192.168.1.4 -j SNAT --to-source 192.160.0.130
Will edit the headers of all traffic heading through the 2nd interface to take on the ip address of the fw itself.
This will allow returning comms from the server, will be sent back through the fw.

####################

Reject all traffic comming from the 10.10.0.0/16 network.
iptables -A INPUT -s 10.10.0.0/16 -p TCP -j REJECT



========================

INPUT - Traffic  coming into the server
OUTPUT - Traffic leaving the server
FORWARD - Router

========================

[root@centos74 ~]# iptables -A INPUT -i lo -j ACCEPT
[root@centos74 ~]# iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
ACCEPT     all  --  anywhere             anywhere


[root@centos74 ~]# iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
[root@centos74 ~]# iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED

# Allow SSH #
[root@centos74 ~]# iptables -A INPUT -p tcp --dport 22 -j ACCEPT
[root@centos74 ~]# iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh

##############################

# iptables-save
*filter
:INPUT ACCEPT [78:6084]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [641:100520]
-A INPUT -i lo -j ACCEPT
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
-A INPUT -j DROP		#		Will prevent ssh connection dropping after iptables -F
COMMIT

---Will give---

# iptables -vnL
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination
    0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0
   84  6192 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:22
   19  1644 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination

Chain OUTPUT (policy ACCEPT 50 packets, 7696 bytes)
 pkts bytes target     prot opt in     out     source               destination

##############################

# Insert rule at 1st line:
# iptables -I INPUT 1 -p tcp --dport 80 -j ACCEPT
[root@centos74 ~]# iptables -L
Chain INPUT (policy ACCEPT)
target     prot opt source               destination
ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:http



#########################################################



How to restrict a port or service to a specific IP or range of IPs.
Entering the following at root will allow SSH connections from the first two locations and drop them from everywhere else:

iptables -I INPUT -p tcp -m tcp -s 70.85.189.123 --dport 22 -j ACCEPT
iptables -I INPUT -p tcp -m tcp -s 70.85.189.100/29 --dport 22 -j ACCEPT
iptables -I INPUT -p tcp -m tcp -s 0.0.0.0/0 --dport 22 -j DROP

To survive reboots, use iptables-save.
Red Hat-based systems will store the configuration here:
/etc/sysconfig/iptables.

If you would like to edit this file directly, use the following:

-A INPUT -p tcp -m tcp -s 70.85.189.123 --dport 22 -j ACCEPT
-A INPUT -p tcp -m tcp -s 70.85.189.100/29 --dport 22 -j ACCEPT
-A INPUT -p tcp -m tcp -s 0.0.0.0/0 --dport 22 -j DROP

IPtables (like most hardware firewalls), uses stateful packet inspection.
It will read the rules in order from top to bottom.
This is why we put all the allowed networks first and then put in a blanket deny all (0.0.0.0/0).
You can enter hosts into IPtables using any of the following formats:
IP address: ex. 70.85.189.123
DNS name: ex. skullbox.net
CIDR: ex. 70.85.189.100/29


# Block particular tcp port in Linux
iptables -A INPUT -p tcp --destination-port PORT-NUBMER -j DROP

# For example block port 22 for everyone:
iptables -A INPUT -p tcp --destination-port 22 -j DROP

# Now let us say you want block port 22 for everyone except for IP 123.321.123.321
iptables -A INPUT -p tcp --destination-port 22 -s \! 123.321.123.321 -j DROP

# To block UDP ports use --tcp udp option:
iptables -A INPUT -p udp --destination-port PORT-NUBMER -j DROP

#########################################################

# cat firewall.sh
iptables -F
iptables -A INPUT -s 0/0 -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A INPUT -s 0/0 -p tcp --dport 22 -j ACCEPT
iptables -P INPUT DROP

# iptables -L
Chain INPUT (policy DROP)
target     prot opt source               destination
ACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED
ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

#########################################################

