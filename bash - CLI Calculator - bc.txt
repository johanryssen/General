# Run bc interactively:
bc -lq

-i	Force interactive mode.
-l	Define the standard math library.
-s	Process exactly the POSIX bc language.
-q	Do not print the normal GNU bc welcome.

--------------
# bc obeys environment variables:
# ~/.profile:
export BC_ENV_ARGS=-lq

--------------

# Using bc in shell scripts:
$ result=$(echo "scale=2; 5 * 7 /3;" | bc)
$ echo $result
11.66

# In contrast: BASH shell only performs integer arithmetic:
$ result=$((5 * 7 /3))
$ echo $result
11

--------------

# Addition:
echo "56.8 + 77.7" | bc

# Convert decimal to hexadecimal:
echo "obase=16; ibase=10; 56" | bc
38

- ibase = input base
- obase = output base
Specifying the base, you can convert a number from one base to another.


# Division:
- Will result in floating point.
- In order to get the correct answer, you need to specify 'scale'.
- Scale means the precision of floating point (how many digit after the point).
- By default the scale is 0, that means it is an integer.

echo "scale=3; 130/23" | bc   # scale=3 results in 3 decimal places.
5.652


----- pi -----
## Assign the value of "pi" to the shell variable pi.
$ pi=$(echo "scale=10; 4*a(1)" | bc -l)
$ echo $pi
3.1415926532


## Calculate pi using the builtin arctangent function, a():
$ bc -lq
scale=50
4*a(1)
3.14159265358979323846264338327950288419716939937508


## Measure how long your systems takes to calc pi to 10'000 decimals:
time bc -l <<< "scale=10000;16*a(1/5) - 4*a(1/239)"


## Calculating Ï€ to 10000 digits
$ bc -lq
scale=10000
4*a(1)    # The atan of 1 is 45 degrees, which is pi/4 in radians.

# This may take several minutes to calculate.

--------------

# Calculation with floating point
echo 2/7 | bc -l
.28571428571428571428

# Use the last value in next calculation
$ bc
...
1+1
2
last+5
7

# Inside bash script
$ result=$(echo "scale=2; 5 * 7 /3;" | bc)
$ echo $result
11.66

# here-string idiom (in bash, ksh, csh):
bc -l <<< "5*7/3"11.66666666666666666666
.11229946524064171122

# awk
$ NUM=$(awk -vinput="$1" 'BEGIN{printf "%.25f", input/10 }')
$ echo "\$? is $?"
$? is 0
$ echo "NUM is $NUM"
NUM is 0.0000000000000000000000000

# Decompose an integer into prime factors
$ factor 27417
27417: 3 13 19 37

# Increment the value of the variable by 5
$ echo "var=10; var+=5;var" | bc
15

# Boolean
$ echo "10 > 5" | bc
1
$ echo "10 < 5" | bc
0

$ echo "4 && 10" | bc
1
$ echo "0 || 0" | bc
0

$ echo 'if(1 == 2) print "true" else print "false"' | bc
false

--------------