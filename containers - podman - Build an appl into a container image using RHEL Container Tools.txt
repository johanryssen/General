
(1) Downloading the Universal Base Image

# buildah from registry.access.redhat.com/ubi8/ubi

https://developers.redhat.com/articles/ubi-faq

# 3 UBI Images:
ubi-minimal
ubi
ubi-init


https://catalog.redhat.com/software/containers/search


(2) Positioning yum Repository

In the command below, buildah is going to run a command on the ubi-working-container image.
The -- indicates that the command should be executed from within the container, which means the results will be applied into the container image.
Lastly, you are providing the yum command to install a package that defines all of the repositories from EPEL: "epel-release-latest-8".

# buildah run ubi-working-container -- yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm


You could verify this was not completed on the localhost by looking for the RPM on the host system:
# rpm -q epel-release
package epel-release is not installed

If your repository configurations are not distributed as an RPM, but instead as individual .repo files, you could use the buildah copy command to copy files from the host operating system into the container image.


(3) Installing the target software
Now that the yum repositories are defined within the container, you can use another yum install, executed within the container, to install the target software:
moon-buggy

# buildah run ubi-working-container -- yum -y install moon-buggy


(4) Committing the new container image
At this point, the container is configured.
It is time to transition from a working container into a committed image.
In the command below, you will use the buildah command to commit the working container to an image called: moon-buggy.

# buildah commit ubi-working-container moon-buggy

Verify that the commit was successful
# podman image list

Notice in the output above that moon-buggy is the first container image listed in the podman image list output.

(5) Running the new containerized software
Now the software has been installed and a new container image created. It is time to spawn a runtime of the container image and validate the software.
The software we are using is a commandline command.
When you run the container, it will be in interactive (-it) mode, based on the moon-buggy container image, and the command run interactively will be /usr/bin/moon-buggy.

# podman run -it moon-buggy /usr/bin/moon-buggy

Kill the running container from Terminal 2.

# podman kill $(podman ps | grep -v CONTAINER | cut -f1 -d" " )

