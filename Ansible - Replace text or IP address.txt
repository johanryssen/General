Ansible - Replace text or IP address

* replace – This module will replace all instances of a pattern within a file.
* lineinfile – Same as replace but this is primarily useful when you want to change a single line in a file only.

Replace all instances of a pattern within a file?

# The syntax is as follows:
- replace:
path: /path/to/file
regexp: 'regular expression for search'
replace: 'replace-word'
backup: yes

# For example, find and replace all instances of foo with bar within a file named /etc/app.conf by creating or updating your yml file:
- replace:
path: /etc/app.conf
regexp: 'foo'
replace: 'bar'
backup: yes

# Another example to replace hostname server1.local.vm with server1.example.com in /etc/hosts:
- replace:
path: /etc/hosts
regexp: '(\s+)server1\.local\.vm(\s+.*)?$'
replace: '\1server1.example.com\2'
backup: yes

# In this example, replace an IP address 123.321.123.321 with 654.12.12.12 in sshd_config and reload sshd service:
# sshd.yml
- replace:
dest: /etc/ssh/sshd_config
regexp: '123.321.123.321'
replace: '654.12.12.12'
backup: yes
validate: '/usr/sbin/sshd -t'
- service:
name: sshd
state: reloaded

# You can run it as follows:
$ ansible-playbook -i hosts sshd.yml 


## Example for lineinfile module

# Update ip address in /etc/hosts file:
# my.yml
- lineinfile:
path: /etc/hosts
regexp: '^123\.321\.123\.321'
line: '10.10.20.30 www.local.vm'
owner: root
group: root
mode: 0644
backup: yes

# Update sshd_config:
# my.yml
- lineinfile:
path: /etc/ssh/sshd_config
regexp: '^123\.321\.123\.321'
line: 'Match Address 10.10.20.30'
backup: yes
validate: '/usr/sbin/sshd -t'
- service:
name: sshd
state: reloaded

# Update/create your hosts file:
$ cat hosts
[cluster:vars]
ansible_user=user1
ansible_become=true
ansible_become_method=sudo

[cluster]
vm1
vm2
vm3
vm4
gc.vm1
gc.vm2
gc.vm3
gc.vm4
aws.vm1
aws.vm2
aws.vm3
aws.vm4

# Run playbook:
$ ansible-playbook -i hosts my.yml