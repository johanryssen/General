Test TCP port without Telnet

-------------------------------------
$ exec 5<>/dev/tcp/time.nist.gov/13; cat <&5 & cat >&5; exec 5>&-

Without netcat, telnet, FTP

/dev/tcp/(hostname)/(port) is a bash builtin that bash can use to open connections to TCP and UDP ports.

Open a connection on a port to a server and lets you read and write to it from the terminal.

(1) exec sets up a redirect for /dev/tcp/$server/$host to file descriptor 5.

(2) Launch a redirect from file descriptor 5 to STDOUT and send that to the background
(which is what causes the PID to be printed when the commands are run),
and then redirect STDIN to file descriptor 5 with the second cat.

(3) When second cat dies (the connection is closed), clean up the file descriptor with 'exec 5>&-'

Can be used to test FTP, HTTP, NTP, or can connect to netcat listening on a port (makes for a simple chat client)

# UDP
Replace /tcp/ with /udp/

-------------------------------------

## BASH ##
$ cat < /dev/tcp/127.0.0.1/22
SSH-2.0-OpenSSH_5.3
^C

$ cat < /dev/tcp/127.0.0.1/23
bash: connect: Connection refused
bash: /dev/tcp/127.0.0.1/23: Connection refused


## CURL ##
$ curl -v telnet://127.0.0.1:22
* About to connect() to 127.0.0.1 port 22 (#0)
*   Trying 127.0.0.1... connected
* Connected to 127.0.0.1 (127.0.0.1) port 22 (#0)
SSH-2.0-OpenSSH_5.3
^C

$ curl -v telnet://127.0.0.1:23
* About to connect() to 127.0.0.1 port 23 (#0)
*   Trying 127.0.0.1... Connection refused
* couldn't connect to host
* Closing connection #0
curl: (7) couldn't connect to host


## NETCAT ##
$ nc -zv -w 5 127.0.0.1 22
Connection to 127.0.0.1 22 port [tcp/ssh] succeeded!

$ nc -zv -w 5 127.0.0.1 23
nc: connect to 127.0.0.1 port 23 (tcp) failed: Connection refused


## PYTHON ##
$ python
Python 2.6.6 (r266:84292, Oct 12 2012, 14:23:48)
[GCC 4.4.6 20120305 (Red Hat 4.4.6-4)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import socket
>>> clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>>> clientsocket.connect(('127.0.0.1', 22))
>>> clientsocket.send('\n')
1
>>> clientsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>>> clientsocket.connect(('127.0.0.1', 23))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<string>", line 1, in connect
socket.error: [Errno 111] Connection refused


## PERL ##
# perl
use IO::Socket::INET;
$| = 1;
my $socket = new IO::Socket::INET(
  PeerHost => '127.0.0.1',
  PeerPort => '22',
  Proto => 'tcp',
);
die "cannot connect to the server $!\n" unless $socket;
print "connected to the server\n";
^D
connected to the server


## RUBY ##
require 'socket'
require 'timeout'

module PortScanner
  class TCP
    def scan( ip, port )
      begin
        Timeout::timeout(1) do 
          begin
            s = TCPSocket.new(ip, port)
            s.close
            return true
          rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
            return false
          end
        end
      rescue Timeout::Error
      end

      return false
    end
  end
end
